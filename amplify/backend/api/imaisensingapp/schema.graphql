# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
type User
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: private, operations: [read, update] }
      { allow: groups, groups: ["Admin"], operations: [read, update, delete] }
    ]
  ) {
  id: ID!
  displayName: String!
  score: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  currentCategoryId: ID @index(name: "usersByCategoryIndex")
  currentCategory: Category @belongsTo(fields: ["currentCategoryId"])
  posts: [PostData] @hasMany(indexName: "postByUser", fields: ["id"])
  likes: [Like] @hasMany
  bingoSheets: [BingoSheet] @hasMany(indexName: "bingoByUser", fields: ["id"])
}

type PostData
  @model
  @auth(
    rules: [
      # createをallow:privateにした
      { allow: owner, operations: [delete] }
      { allow: private, operations: [create, read, update] }
      { allow: groups, groups: ["Admin"], operations: [read, update, delete] }
    ]
  ) {
  id: ID!
  imageUrl: String
  userId: ID! @index(name: "postByUser", sortKeyFields: ["updatedAt"])
  user: User @belongsTo(fields: ["userId"])
  postedby: String
  lat: Float!
  lng: Float!
  category: String!
  comment: String!
  reported: Boolean!
  deleted: Boolean!
  visible: Boolean!
  likes: [Like] @hasMany(indexName: "likeByPost", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  point: Int!
  postType: String!
    @default(value: "POST")
    @index(name: "postByUpdatedAt", sortKeyFields: ["updatedAt"])
}

type Like
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, delete] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"], operations: [read, delete] }
    ]
  ) {
  id: ID!
  userId: ID!
  postId: ID! @index(name: "likeByPost")
  createdAt: AWSDateTime!
}

type Category
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String!
  users: [User] @hasMany(indexName: "usersByCategoryIndex", fields: ["id"])
}

type BingoSheet
  @model
  @auth(
    rules: [
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  userId: ID! @index(name: "bingoByUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userId"])
  squares: [BingoSquare]!
  createdAt: AWSDateTime!
  isUsed: Boolean!
}

type BingoSquare
  @model
  @auth(
    rules: [
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  number: Int!
  categoryName: String!
  isOpen: Boolean!
}

